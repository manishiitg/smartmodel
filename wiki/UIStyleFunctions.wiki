#summary Function Implementation for ModelStyles Interface

= Introduction =

This Section details on how the various functions for the ModelStyles Interface should be implemented to create your own UI Style.

All keywords inside {} are system keywords.
eg. {UTIL_SECTION} dont, remove or change these.
There will be overwritten by UI code with proper HTML.

=Functions==

===setProp($array):===
Deprecated.

===getTableHTMLStructure():===
This function should return a string that will contain the HTML code for the general layout of the UI. This layout is used by the UI class to create the table. You will need to define your own layout which you need to use.
For our example we will define the function as follows:

{{{
public function getTableHTMLStructure(){

$html='
 <div>
  {UTIL_SECTION}
 </div>

 <div>

  <div style="float:left">
   {PAGING_FORM}
  </div>

  <div style="float:right">
  {FILTER_FIELDS}
  </div>

 </div>

  <div>
   {ADVANCED_SEARCH}
  </div>

 <table>
  <tr>
   {TABLE_HEADER}
  </tr>
  {TABLE_CONTENT}
 </table>

 <div>
  <div style="float:left">
   {PAGING_FORM}
  </div>

  <div style="float:right">
   {FILTER_FIELDS}
  </div>
 </div>';

 return$html;

}
}}}

Now let’s get into the details of this function. Basically what the function does is define a string containing HTML code and returns it. You can use any kind of html code you want to.

The important thing to note here, are the strings with curly brackets *{}*. These are the strings that the UI class searches for and replaces them with the layout returned by various other functions of the interface.

    * *`{UTIL_SECTION}`:* This defines the utility section for the UI. That is the place where the links for Export as CSV and Export as PDF will appear.

    * *`{PAGING_FORM}`:* This defines the place where the pagination for the UI will appear.

    * *`{FILTER_FIELDS}`:* This is where the dropdowns for the filtering the contents of the UI table will appear.

    * *`{ADVANCED_SEARCH}`:* This is where the advanced search feature will be shown.

    * *`{TABLE_HEDER}`:* This place will show the table header.

    * *`{TABLE_CONTENT}`:* This will show the data that the UI class fetches from the database.

*Note: The constants that are shown here are fixed and for the UI to work properly you will have to use the same constants in your own style.*

===getUtilHTML():===
This function defines the layout for the utility section of the UI. For our purposes we use the following layout:

{{{
public function getUtilHTML(){

 $html='';
 $html.='<a href="{href_csv}"><span>Export CSV</span></a>';
 $html.='<a href="{href_pdf}"><span>Export PDF</span></a>';

 return$html;

}
}}}

Over here we are using `<a></a>` tags for the Utility section. The `{href_csv}` and `{href_pdf}` will be replaced by a link generated by the UI class which will be used to generate the the CSV or PDF.

===getFilterHTML():===
This function defines the layout for the section containing filter dropdowns. Example:

{{{
public function getFilterHTML(){

 $html='';
 $html.='<span style="margin-left:20px">Filter By: ';
 $html.='{FILTER_FORMS}';
 $html.='</span>';

 return $html;

}
}}}

    * *`{FILTER_FORMS}`:* is where the dropdowns will appear.

===getFilterBox():===
This defines the layout for the dropdowns. Example:

{{{
public function getFilterBox(){

 $html='';
 $html.='<span>{FILTER_NAME}</span>';
 $html.='<span>{FILTER_FORM}</span>';

return$html;

}
}}}

 * *`{FILTER_NAME}`:* This is where the column name will appear.

 * *`{FILTER_FORM}`:* This is where the dropdown will appear.

===getContentRowHTML(`$number = -1`):===
Defines the layout for each row in the table. The UI class passes the row number in $number variable. Example:

{{{
public function getContentRowHTML($number = -1){

 $html='<tr>{ROW}</tr>';

 return$html;

}
}}}

 * *`{ROW}`:* This will be replaced by the contents that will be displayed in each row.

===getContentCellHTML(`$first = false, $last = false, $number = -1, $isAction = false`):===
This defines the layout each cell in the table will have. 

Here,

 * *`$first`* will be `true` if it is the first cell in the row;

 * *`$last`* will be `true` if it is the last cell in the row;

 * *`$number`* is the cell number in the row;

 * *`$isAction`* will be `true` if the cell is in the Action column. 

Example:

{{{
public function getContentCellHTML($first = false, $last = false, $number = -1, $isAction = false){

 $html='<td>{CELL}</td>';

 return$html;

}
}}}

 * *`{CELL}`:* This is where the contents of each cell will be displayed.

===getContentActionLink():===
This defines the layout for the action links in the action column. Example:

{{{
public function getContentActionLink(){

 $html='<a href="{href}">{name}</a>';

 return$html;

}
}}}

 * *`{href}`:* This is where the link for the action goes.

 * *`{name}`:* This is where the action name will be displayed.

===getHeaderRow(`$name, $first = false, $last = false, $number = -1, $sort = false, $href = ‘ ‘, $type = 1, $showImg = false`):===
This defines the layout for the header of the table

Here,

 * *`$name`* is the name assigned to the column;

 * *`$first`* will be `true` if it is the first cell in the header;

 * *`$last`* will be `true` if it is the last cell in the header;

 * *`$number`* is the cell number in the header;

 * *`$sort`* is `true` if sorting is enabled for that column;

 * *`$href`* contains the link which will be used when the column header is clicked.

 * *`$type`* will be any of the following constants, `UI::SORT_DESC` => for descending order, or `UI::SORT_ASC` => for ascending order;

 * *`$showImg`* will be `true` if image is to be displayed depending on the sorting of the column.

Example:

{{{
public function getHeaderRow($name, $first = false, $last = false, $number = 1, $sort = false, $href = '', $type = 1, $showImg = false){

 if(!$sort){

  if($first){ 
   $html="<th class='headerLeft'>$name</th>";
  }else if($last){
   $html="<th class='headerRight'>$name</th>";
  }else{
   $html="<th class='cellCenter'>$name</th>";
  }

 }else{

  if($first){
   $html="<th class='headerLeft'><a style='text-decoration:none' href='{href}'>$name</a>";
  }else if($last){
   $html="<th class='headerRight'><a style='text-decoration:none' href='{href}'>$name</a>";
  }else{
   $html="<th class='cellCenter'><a style='text-decoration:none' href='{href}'>$name</a>";
  }

  if($showImg){
   $html.="<img src='{image}'/>";
  }

  $html.="</th>";

 }

 $html= str_replace('{href}',$href,$html);

 if($showImg){
  if($type== UI::SORT_DESC){
   $html= str_replace('{image}','downarrow.png',$html);
  }else{
   $html= str_replace('{image}','uparrow.png',$html);
  }

 }else{
  $html= str_replace('{image}','',$html);
 }

 return$html;

}
}}}

===getPagingHTML(`$hasNext, $hasPrev`):===
This defines the layout each cell in the table will have. 

Here,

 * *`$hasNextwill`* be `true` if there are any more pages after the current page;
 * *`$hasPrevwill`* be `true` if there are any pages before the current page; 

Example:

{{{
public function getPagingHTML($hasNext, $hasPrev){

 $html="<tr>";
 $html.="<td><span >View Per Page: {PER_PAGE_FORM} </span></td>";
 $html.="<td><span style='padding-left:5px'>Current Page: <b>{CURRENT_PAGE}</b></span></td>";
 $html.="<td><span style='padding-left:5px'>Pages: <b>{TOTAL_PAGES}</b></span></td>";
 $html.="<td><span style='padding-left:5px'>Rows: <b>{TOTOAL_ROWS}</b></span></td>";

 if($hasPrev)
  $html.="<td><a onclick='' id='' href='{prev_href}' class='page_prev_ui'></a></td>";

 if($hasNext)
  $html.="<td><a onclick='' id='' href='{next_href}' class='page_next_ui'></a></td>";

 $html.="<tr>";

 return$html;

}
}}}

 * *`{PER_PAGE_FORM}`:* This is where the drop down for the user to select how many entries per page should be displayed.
 * *`{CURRENT_PAGE}`:* The Current page number is displayed here.
 * *`{TOTAL_PAGES}`:* The total number of pages is displayed here.
 * *`{TOTAL_ROWS}`:* The total number of rows is displayed here.
 * *`{prev_href}`:* The link for the previous page goes here.
 * *`{next_href}`:* The link for the next page is displayed here.

===getFormStructure(`$url, $columns, $id = ‘ ‘, $method = ‘get’, $form_attr = ‘ ‘`):===
This function is not being used currently. It may have some use in the future. 